## Upgrading to Rails 4

Since the advent of [Bundler](http://gembundler.com), upgrading a Rails
application has become much easier.

That said, upgrading to Rails 4 is a bit more involved than simply running
`bundle update`.

---

### <a id="rails-32"></a>Rails 3.2

It is much easier to upgrade a Rails application in small steps. If an
application you wish to upgrade to Rails 4 is not yet running the latest
version of Rails 3.2, you should first upgrade it there as a stepping stone.

In order to provide the best content in a concise form, this handbook assumes
applications being upgraded are running on the latest version of Rails 3.2.

Resources that can help upgrade older applications to Rails 3 include:

* [Rails 3 Upgrade Handbook](http://www.railsupgradehandbook.com/)
* [Rails 3.2 Release Notes](http://guides.rubyonrails.org/3_2_release_notes.html)

### <a id="ruby-193"></a>Ruby 1.9.3

Rails 4 *requires* Ruby 1.9.3 and *recommends* Ruby 2.0.0. Attempting to run
Rails 4 with a Ruby version below 1.9.3 will cause syntax errors or runtime
issues.

While Ruby 2.0.0 is mostly backwards compatible with 1.9.3, I recommend you
upgrade only to 1.9.3 during the initial stages of upgrading to Rails 4. You
are less likely to run into issues with Ruby itself if the jump is as small as
possible. After you have stabilized your application on Ruby 1.9.3 and Rails
4, consider upgrading to Ruby 2.0.0.

You can upgrade Ruby with a single command using [`rvm`](https://rvm.io/):

@@@ text
$ rvm install 1.9.3
@@@

If an existing application has a `.rvmrc` file in its root directory, it must
specify Ruby 1.9.3 or above. A new `.rvmrc` file can be generated by running:

@@@ text
$ rvm use --rvmrc 1.9.3
@@@

If an existing application uses [JRuby](http://jruby.org), Rails 4 requires
version JRuby 1.7.0 or above (which runs with Ruby 1.9.3 support by default).

@@@ text
$ rvm install jruby-1.7.3
$ rvm use --rvmrc jruby-1.7.3
@@@

### <a id="bundler"></a>bundler

It is possible that Rails 4 will require a more recent version of `bundler`
than is installed in your set of gems.

To avoid any potential problems, simply upgrade to the latest version of
`bundler` before going any farther:

@@@ text
$ gem install bundler
@@@

### <a id="rails4_upgrade"></a>rails4\_upgrade gem

The [`rails4_upgrade gem`](https://github.com/alindeman/rails4_upgrade) helps
automate some of the process required to upgrade to Rails 4.

Install the gem in the application that's being upgraded by adding it to
`Gemfile`:

@@@ ruby
# Gemfile
gem 'rails4_upgrade'
@@@

Finish the installation by running `bundle`:

@@@ text
$ bundle install
@@@

### <a id="incompatible-gems"></a>Checking for Incompatible Gems

`rails4_upgrade` adds a `rake` task to check for gems that are locked to
Rails 3, preventing an application from upgrading successfully.

Run the task:

@@@ text
$ bundle exec rake rails4:check_gems
@@@

In an ideal world, you would see `"No gem incompatibilities found"`, meaning
you can upgrade to Rails 4 straightaway. However, it is more likely that you
will be presented with a table of gems and the version of Rails to which they
are locked.

In this example, the application depends on a version of
[`draper`](http://github.com/drapergem/draper) that requires `actionpack` 3.2.x
and `activesupport` 3.2.x, both gems in the Rails suite:

@@@ text
+-----------------+----------------------+
| Dependency Path | Rails Requirement    |
+-----------------+----------------------+
| draper 0.18.0   | actionpack ~> 3.2    |
| draper 0.18.0   | activesupport ~> 3.2 |
+-----------------+----------------------+
@@@

Attempting to upgrade to Rails 4 with `draper` 0.18.0 will cause `bundler` to
raise an error, as this would violate the constraint set by draper.

If an incompatible gem in the list is under active development, it may already
have a version that supports Rails 4. Check the gem's website or source
repository (often hosted on [GitHub](http://github.com)).

If a Rails 4 compatible version is available, specify the compatible version in
`Gemfile` and use `bundler` to update it. In this case, `draper` 1.0.0 supports
Rails 4.

@@@ ruby
# Gemfile
gem 'draper', '>=1.0.0'
@@@

<p></p>

@@@ text
$ bundle update draper
@@@

If a Rails 4 compatible version is not yet available, it is unfortunately not
possible for you to upgrade until that gem adds support or the gem is removed
from the application.

Check the gem's issue tracker to see if the authors are aware of the
incompatibility; if not, create a new issue.

It is also possible that the gem already works with Rails 4 and the constraints
that the gem authors impose are simply unnecessary. Flip to the appendix on
[forking the gem source and loosening the
constraints](#forking-and-loosening-constraints) to see if it is possible to
loosen the constraints manually for the time being.

While it may start feeling like a game of whack-a-mole, repeat the process
until `rake rails4:check_gems` reports that no incompatibilities exist.

### <a id="upgrading-rails-itself"></a>Upgrading Rails Itself

Open `Gemfile` in a text editor and change the line that starts with `gem
'rails'` to:

@@@ ruby
# Gemfile
gem 'rails', '~>4.0.0.beta1'
@@@

Rails 4 also depends on newer versions of gems that drive the asset pipeline
(which was introduced in Rails 3.1). Namely, make sure to update `sass-rails`
and `coffee-rails` as well:

@@@ ruby
# Gemfile

# Replaces "gem 'sass-rails', '~>3.x.y'"
gem 'sass-rails', '~>4.0.0.rc1'

# Replaces "gem 'coffee-rails', '~>3.x.y'"
gem 'coffee-rails', '~>4.0.0'

# Replaces "gem 'uglifier', '~>1.0.3'"
gem 'uglifier', '>=1.3.0'
@@@

<a id="no-assets-group"></a>Furthermore, Rails 4 removes the `:assets` group.
If you have gems currently grouped in `:assets` in `Gemfile`, you need to
promote them to the top level:

@@@ ruby
# Gemfile

# Delete `group :assets` and move these gems
# (and any others) to the top level
gem 'sass-rails', '~>4.0.0.rc1'
gem 'coffee-rails', '~>4.0.0'
gem 'uglifier', '>=1.3.0'
@@@

<a id="deprecation-gems"></a>Finally, Rails 4 moves many features into gems
that were previously shipped with Rails itself. Later chapters go into more
detail about these changes, and you may not actually need all of these gems for
your application.  For now, however, add all of the gems that are required to
keep existing Rails features working properly after upgrading:

@@@ ruby
# Gemfile
gem 'protected_attributes', '~>1.0.1'
gem 'activeresource', '~>4.0.0.beta1'
gem 'actionpack-action_caching', '~>1.0.0'
gem 'actionpack-page_caching', '~>1.0.0'
gem 'activerecord-session_store', '~>0.0.1'
gem 'rails-observers', '~>0.1.1'
gem 'actionview-encoded_mail_to', '~>1.0.3'
gem 'rails-perftest', '~>0.0.2'
gem 'actionpack-xml_parser', github: 'rails/actionpack-xml_parser'
@@@

Save `Gemfile` and run from the terminal:

@@@ text
$ bundle update rails
@@@

`bundle` should show output like:

@@@ text
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
...
@@@

You're riding on Rails 4!

### <a id="rspec"></a>RSpec

Tests are critical to a smooth upgrade process: they can help highlight
breaking changes that need attention with you manually running through each
code path in your application.

If you use RSpec as your testing framework, upgrade it to the latest version to
get Rails 4 support:

@@@ ruby
# Gemfile
group :development, :test do
  gem 'rspec-rails', '>= 2.13.1'
end
@@@

Finally, run `bundle update rspec-rails`.

### <a id="binstubs"></a>Binaries and Binstubs

Binaries have been a source of confusion in the Rails ecosystem for a while.
For instance, in Rails 3, the `rails` command can be run alone (just `rails`)
or via `script/rails`. It can also be run prefixed with `bundle exec`, though
it is normally not necessary.

On the other hand, the `rake` command usually *does* need to be prefixed with
`bundle exec` (gems like
[rubygems-bundler](https://github.com/mpapis/rubygems-bundler) remove the need
to actually type `bundle exec`, but the effect is simply hidden from view). If
you've ever been frustrated by a message claiming "You have already activated
rake x.y.z" you know what I mean!

Rails 4 considers binaries to be part of the Rails application itself so they
can be invoked in a standard way and versioned alongside the application.

In Rails 4, the `rails` binary now lives in `bin/` and can be invoked as
`bin/rails`.  Similarly, `rake` can be invoked as `bin/rake`.  You are
encouraged to check these binaries into version control so that commands run
consistently on every machine the codebase is deployed to.

You can generate binaries your application depends on (e.g., `rspec`) with the
`bundle binstubs` command. For instance, `bundle binstubs rspec-core` adds the
`bin/rspec` command (the `rspec` binary is a part of the `rspec-core` gem).

When upgrading, you should adopt this new convention. To do so, first remove
`/bin` from `.gitignore` (if it's currently ignored) so you will be able to add
binstubs to version control.

Next, run `bundle exec rake rails:update:bin` to add the `bin/rails` and
`bin/rake` binstubs (this is the last time you'll need to use `bundle exec
rake`; now use `bin/rake` instead!).

Finally, add these binstubs (and `.gitignore`) to version control:

@@@ text
$ git add .gitignore bin/
$ git commit -m 'Adds binstubs for rails and rake'
@@@

#### I was already using binstubs in Rails 3!

If you were already using bundler binstubs (generated with `bundle install
--binstubs`), Rails will start raising a warning when you use the
`rails` command:

@@@ text
Looks like your app's ./bin/rails is a stub that was generated by Bundler.

In Rails 4, your app's bin/ directory contains executables that are versioned
like any other source code, rather than stubs that are generated on demand.

To upgrade, regenerate the `bundle`, `rails`, and `rake` binaries through
Rails (*not* Bundler), and check in those binaries to source control.

Afterward, you can add specific binstubs for commands you want to ship
alongside your application.

To get started, run:

@@@ text
$ bundle config --delete bin
$ rake rails:update:bin # if asked to override, say 'y'

# Remove bin/ from .gitignore if it appears there
$ git add bin/bundle bin/rails bin/rake
$ git commit -m 'Adds binstubs for rails and rake'
@@@

Finally, add specific binstubs:

@@@ text
$ bundle binstubs rspec-core
$ git add bin/rspec bin/autospec
$ git commit -m 'Adds binstubs for rspec'
@@@
