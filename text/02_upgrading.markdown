## Upgrading to Rails 4

Since the advent of [Bundler](http://gembundler.com), upgrading a Rails
application has become much easier.

That said, upgrading to Rails 4 is a bit more involved than simply running
`bundle update`.

---

### Ruby 1.9.3

Rails 4 *requires* at least Ruby 1.9.3. Attempting to run it on anything below
1.9.3 will cause syntax errors or runtime issues.

You can upgrade Ruby with a single command using [`rvm`](https://rvm.io/):

@@@ text
$ rvm install 1.9.3
@@@

If an existing application has a `.rvmrc` file in its root directory, it must
specify Ruby 1.9.3 or above. A new `.rvmrc` file can be generated by running:

@@@ text
$ rvm use --rvmrc 1.9.3
@@@

<!-- TODO: fact check this -->
If an existing application uses [JRuby](http://jruby.org), Rails 4 requires
version JRuby 1.7.0 or above (which runs with Ruby 1.9.3 support by default).
Unfortunately, JRuby version numbers are a tad confusing.

@@@ text
$ rvm install jruby-1.7.0
$ rvm use --rvmrc jruby-1.7.0
@@@

### bundler

It is possible that Rails 4 will require a more recent version of `bundler`
than is installed in your set of gems.

To avoid any potential problems, simply upgrade to the latest version of
`bundler` before going any farther:

@@@ text
$ gem install bundler
@@@

### rails4\_upgrade gem

The [`rails4_upgrade gem`](https://github.com/alindeman/rails4_upgrade) helps
automate some of the process required to upgrade to Rails 4.

Install the gem in the application that's being upgraded by adding it to
`Gemfile`:

@@@ ruby
# Gemfile
gem 'rails4_upgrade'
@@@

Finish the installation by running `bundle`:

@@@ text
$ bundle install
@@@

### Checking for Incompatible Gems

`rails4_upgrade` adds a `rake` task to check for gems that are locked to
Rails 3, preventing an application from upgrading successfully.

Run the task:

@@@ text
$ bundle exec rake rails4:check_gems
@@@

In an ideal world, you would see `"No gem incompatibilities found"`, meaning
you can upgrade to Rails 4 straightaway. However, it is more likely that you
will be presented with a table of gems and the version of Rails to which they
are locked.

In this example, the application depends on a version of
[`draper`](http://github.com/drapergem/draper) that requires `actionpack` 3.2.x
and `activesupport` 3.2.x, both gems in the Rails suite:

@@@ text
+-----------------+----------------------+
| Dependency Path | Rails Requirement    |
+-----------------+----------------------+
| draper 0.18.0   | actionpack ~> 3.2    |
| draper 0.18.0   | activesupport ~> 3.2 |
+-----------------+----------------------+
@@@

Attempting to upgrade to Rails 4 with `draper` 0.18.0 will cause `bundler` to
raise an error, as this would violate the constraint set by draper.

If an incompatible gem in the list is under active development, it may already
have a version that supports Rails 4. Check the gem's website or source
repository (often hosted on [GitHub](http://github.com)).

If a Rails 4 compatible version is available, specify the compatible version in
`Gemfile` and use `bundler` to update it:

@@@ ruby
# Gemfile
gem 'draper', 'X.Y.Z' # TODO when draper supports Rails 4
@@@

<p></p>

@@@ text
$ bundle update draper
@@@

If a Rails 4 compatible version is not yet available, it is unfortunately not
possible for you to upgrade until that gem adds support or the gem is removed
from the application.

Check the gem's issue tracker to see if the authors are aware of the
incompatibility; if not, create a new issue.

It is also possible that the gem already works with Rails 4 and the constraints
that the gem authors impose are simply unnecessary. Flip to the appendix on
[forking the gem source and loosening the
constraints](#forking-and-loosening-constraints) to see if it is possible to
loosen the constraints manually for the time being.

While it may start feeling like a game of whack-a-mole, repeat the process
until `rake rails4:check_gems` reports that no incompatibilities exist.

### <a id="upgrading-rails-itself"></a>Upgrading Rails Itself

Rails 4 has not been yet been packaged and released, so the best way to upgrade
an existing application is to tell Bundler to use the `master` branch of the
Rails git repository.

Open `Gemfile` in a text editor and change the line that starts with `gem
'rails'` to:

@@@ ruby
# Gemfile
gem 'rails', github: 'rails/rails'
@@@

Rails 4 also depends on newer versions of gems that drive the asset pipeline
(which was introduced in Rails 3.1). Namely, make sure to update `sass-rails`
and `coffee-rails` to the `master` branch as well:

@@@ ruby
# Gemfile

group :assets do
  # Replaces "gem 'sass-rails', '~>3.x.y'"
  gem 'sass-rails', github: 'rails/sass-rails'

  # Replaces "gem 'coffee-rails', '~>3.x.y'"
  gem 'coffee-rails', github: 'rails/coffee-rails'
end
@@@

<!-- TODO: Remove after release -->
Additionally, Rails 4 depends on other gems that themselves have not yet been
released. For this reason, it is necessary to add these lines to `Gemfile`:

@@@ ruby
# Gemfile
gem 'activerecord-deprecated_finders', 
  github: 'rails/activerecord-deprecated_finders'

gem 'arel',    github: 'rails/arel'
gem 'journey', github: 'rails/journey'
@@@

`activerecord-deprecated_finders` allows certain dynamic finders that have
been deprecated to keep operating correctly. More information about these
changes is available in the [ActiveRecord](#activerecord) chapter.

`arel` assists in the construction of SQL database queries.

`journey` parses routes so that requests can be efficiently dispatched within
the Rails application. At the current time, only the version from git is
compatible with Rails 4.

Finally, Rails 4 moves many features into gems that were previously shipped
with Rails itself. Later chapters go into more detail about these changes. For
now, however, add all of the gems that are required to keep existing Rails
features working properly after upgrading:

@@@ ruby
# Gemfile
gem 'protected_attributes',
  github: 'rails/protected_attributes'

gem 'activeresource',
  github: 'rails/activeresource'

gem 'actionpack-action_caching',
  github: 'rails/actionpack-action_caching'

gem 'actionpack-page_caching',
  github: 'rails/actionpack-page_caching'

gem 'activerecord-session_store',
  github: 'rails/activerecord-session_store'

gem 'rails-observers',
  github: 'rails/rails-observers'
@@@

Save `Gemfile` and run from the terminal:

@@@ text
$ bundle update rails
@@@

`bundle` should show output like:

@@@ text
Updating git://github.com/rails/rails.git
Updating git://github.com/rails/activerecord-deprecated_finders.git
Updating git://github.com/rails/journey.git
Updating git://github.com/rails/sass-rails.git
Updating git://github.com/rails/coffee-rails.git
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Using ...
@@@

You're riding on Rails 4!
