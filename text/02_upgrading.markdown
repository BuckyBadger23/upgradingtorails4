## Upgrading to Rails 4

Since the advent of [Bundler](http://gembundler.com), upgrading a Rails
application has become much easier.

That said, upgrading to Rails 4 is a bit more involved than simply running
`bundle update`.

### Ruby 1.9.3

Rails 4 *requires* at least Ruby 1.9.3. Attempting to run it on anything below
1.9.3 will cause syntax errors or runtime issues.

Upgrading Ruby with [`rvm`](https://rvm.io/) is one command:

@@@ text
$ rvm install 1.9.3
@@@

If an existing application has a `.rvmrc` file in its root directory, it must
specify Ruby 1.9.3 or above. A new `.rvmrc` file can be generated by running:

@@@ text
$ rvm use --rvmrc 1.9.3
@@@

<!-- TODO: fact check this -->
If an existing application uses [JRuby](http://jruby.org), Rails 4 requires
version JRuby 1.7.0 or above (which runs with 1.9.3 support by default).

@@@ text
$ rvm use --rvmrc jruby-1.7.0
@@@

<!-- TODO: Update for final release -->

### Upgrading Rails Itself

Rails 4 has not been yet been packaged and released; the best way to upgrade an
existing application is to tell Bundler to use the `master` branch of the Rails
git repository.

Open `Gemfile` in a text editor and change the line that starts with `gem
'rails'` to:

@@@ ruby
# Gemfile
gem 'rails', github: 'rails/rails'
@@@

Rails 4 also depends on newer versions of gems that drive the asset pipeline
introduced in Rails 3.1. If the application uses any gems for the asset
pipeline, they must also be upgraded:

@@@ ruby
# Gemfile

# Replaces "gem 'sass-rails', '~>3.x.y'"
gem 'sass-rails', github: 'rails/sass-rails'

# Replaces "gem 'coffee-rails', '~>3.x.y'"
gem 'coffee-rails', github: 'rails/coffee-rails'
@@@

<!-- TODO: Remove after release -->
Additionally, Rails 4 depends on other gems that have not yet been released
themselves. For this reason, it is necessary to add these lines to `Gemfile`:

@@@ ruby
# Gemfile
gem 'activerecord-deprecated_finders', 
  github: 'rails/activerecord-deprecated_finders'

gem 'journey', github: 'rails/journey'
@@@

Save `Gemfile` and run from the terminal:

@@@ text
$ bundle update rails
@@@

If all goes well, `bundle` will show output like:

@@@ text
Updating git://github.com/rails/rails.git
Updating git://github.com/rails/activerecord-deprecated_finders.git
Updating git://github.com/rails/journey.git
Updating git://github.com/rails/sass-rails.git
Updating git://github.com/rails/coffee-rails.git
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Using ...
@@@

### Rails Configuration Changes

Not yet written!

### Upgrading Gem Dependencies

<!-- TODO: At some point, ransack will support Rails 4. Clarify the point here -->
It is possible that an application depends on gems that are locked to Rails 3.
If this happens, `bundle update rails` will show output like:

@@@ text
Bundler could not find compatible versions for gem "activerecord":
  In Gemfile:
    ransack (~> 0.7.0) ruby depends on
      activerecord (~> 3.0) ruby

    rails (>= 0) ruby depends on
      activerecord (4.0.0.beta)
@@@

In this particular case [ransack](https://github.com/ernie/ransack) version
0.7.0, a gem for performing complicated database searches, is not yet
compatible with Rails 4.

If the gem is under active development, it may already have a version that
supports Rails 4. Check the gem's website or source repository (often hosted on
[GitHub](http://github.com)).

If a Rails 4 compatible version is available, specify the compatible version in
`Gemfile` and add that gem to the list passed to `bundle update`:

@@@ ruby
# Gemfile
gem 'ransack', 'X.Y.Z' # TODO when ransack supports Rails 4
@@@

@@@ text
$ bundle update rails ransack
@@@

If a Rails 4 compatible version is not yet available, it is unfortunately not
possible for you to upgrade until that gem adds support or the gem is removed
from the application.

Check the gem's issue tracker to see if the authors are aware of the
incompatibility; if not, create a new issue.

It is also possible that the gem already works with Rails 4 and the constraints
that the gem authors impose are unnecessary. If that is the case, I provide a
guide to [forking the gem source and loosening the
constraints](#forking-and-loosening-constraints).

It is likely that an application will require many iterations of running
`bundle update`, seeing an incompatibility, upgrading the outdated gem, and
rerunning `bundle update`. It may begin feel like a game of whack-a-mole! Once
`bundle` does run successfully, though, you are riding on Rails 4.
